package main

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"net"
	"net/http"
	"net/url"
	"os"
	"time"

	"encoding/base64"
	"encoding/json"

	"github.com/pion/interceptor"
	"github.com/pion/interceptor/pkg/intervalpli"
	"github.com/pion/rtp"
	"github.com/pion/webrtc/v4"
)

type udpConn struct {
	conn        *net.UDPConn
	port        int
	payloadType uint8
}

func main() {
	if 3 != len(os.Args) {
		fmt.Fprintf(os.Stderr, "example usage: ffmpeg | ./host-golang https://meetrostation.com \"secret host room id\" | ffplay\n")
		return
	}
	signalServer := os.Args[1]
	hostId := os.Args[2]

	// Create a MediaEngine object to configure the supported codec
	mediaEngine := &webrtc.MediaEngine{}

	// Setup the codecs you want to use.
	// We'll use a VP8 and Opus but you can also define your own
	if err := mediaEngine.RegisterCodec(webrtc.RTPCodecParameters{
		RTPCodecCapability: webrtc.RTPCodecCapability{
			MimeType: webrtc.MimeTypeVP8, ClockRate: 90000, Channels: 0, SDPFmtpLine: "", RTCPFeedback: nil,
		},
	}, webrtc.RTPCodecTypeVideo); err != nil {
		panic(err)
	}
	if err := mediaEngine.RegisterCodec(webrtc.RTPCodecParameters{
		RTPCodecCapability: webrtc.RTPCodecCapability{
			MimeType: webrtc.MimeTypeOpus, ClockRate: 48000, Channels: 0, SDPFmtpLine: "", RTCPFeedback: nil,
		},
	}, webrtc.RTPCodecTypeAudio); err != nil {
		panic(err)
	}

	// Create a InterceptorRegistry. This is the user configurable RTP/RTCP Pipeline.
	// This provides NACKs, RTCP Reports and other features. If you use `webrtc.NewPeerConnection`
	// this is enabled by default. If you are manually managing You MUST create a InterceptorRegistry
	// for each PeerConnection.
	interceptorRegistry := &interceptor.Registry{}

	// Register a intervalpli factory
	// This interceptor sends a PLI every 3 seconds. A PLI causes a video keyframe to be generated by the sender.
	// This makes our video seekable and more error resilent, but at a cost of lower picture quality and higher bitrates
	// A real world application should process incoming RTCP packets from viewers and forward them to senders
	intervalPliFactory, err := intervalpli.NewReceiverInterceptor()
	if err != nil {
		panic(err)
	}
	interceptorRegistry.Add(intervalPliFactory)

	// Use the default set of Interceptors
	if err = webrtc.RegisterDefaultInterceptors(mediaEngine, interceptorRegistry); err != nil {
		panic(err)
	}

	// Create the API object with the MediaEngine
	api := webrtc.NewAPI(webrtc.WithMediaEngine(mediaEngine), webrtc.WithInterceptorRegistry(interceptorRegistry))
	_ = api

	peerConnection, err := webrtc.NewPeerConnection(webrtc.Configuration{
		ICEServers: []webrtc.ICEServer{
			{
				URLs: []string{"stun:stun.l.google.com:19302"},
			},
		},
	})
	if err != nil {
		panic(fmt.Sprintf("problem with stun: %s", err))
	}

	videoTrack, err := webrtc.NewTrackLocalStaticRTP(
		webrtc.RTPCodecCapability{MimeType: webrtc.MimeTypeVP8}, "video", "pion",
	)
	if err != nil {
		panic(fmt.Sprintf("problem with NewTrackLocalStaticRTP: %s", err))
	}

	rtpSender, err := peerConnection.AddTrack(videoTrack)
	if err != nil {
		panic(fmt.Sprintf("problem with AddTrack: %s", err))
	}
	_ = rtpSender

	audioTrack, err := webrtc.NewTrackLocalStaticRTP(
		webrtc.RTPCodecCapability{MimeType: webrtc.MimeTypeOpus}, "audio", "pion",
	)
	if err != nil {
		panic(fmt.Sprintf("problem with NewTrackLocalStaticRTP: %s", err))
	}

	rtpSender, err = peerConnection.AddTrack(audioTrack)
	if err != nil {
		panic(fmt.Sprintf("problem with AddTrack: %s", err))
	}
	_ = rtpSender

	// // Read incoming RTCP packets
	// // Before these packets are returned they are processed by interceptors. For things
	// // like NACK this needs to be called.
	// go func() {
	// 	rtcpBuf := make([]byte, 1500)
	// 	for {
	// 		if _, _, rtcpErr := rtpSender.Read(rtcpBuf); rtcpErr != nil {
	// 			return
	// 		}
	// 	}
	// }()

	// Set the handler for ICE connection state
	// This will notify you when the peer has connected/disconnected
	peerConnection.OnICEConnectionStateChange(func(connectionState webrtc.ICEConnectionState) {
		fmt.Fprintf(os.Stderr, "Connection State has changed %s \n", connectionState.String())

		if connectionState == webrtc.ICEConnectionStateFailed {
			if closeErr := peerConnection.Close(); closeErr != nil {
				panic(closeErr)
			}
		}
	})

	// Create offer
	offer, err := peerConnection.CreateOffer(nil)
	if err != nil {
		panic(fmt.Sprintf("problem with CreateOffer: %s", err))
	}

	// Create channel that is blocked until ICE Gathering is complete
	gatherComplete := webrtc.GatheringCompletePromise(peerConnection)

	// Sets the LocalDescription, and starts our UDP listeners
	if err = peerConnection.SetLocalDescription(offer); err != nil {
		panic(fmt.Sprintf("problem with SetLocalDescription: %s", err))
	}

	// Create a local addr
	var laddr *net.UDPAddr
	if laddr, err = net.ResolveUDPAddr("udp", "127.0.0.1:"); err != nil {
		panic(err)
	}

	udpConns := map[string]*udpConn{
		"audio": {port: 4000, payloadType: 111},
		"video": {port: 4002, payloadType: 96},
	}
	for _, conn := range udpConns {
		// Create remote addr
		var raddr *net.UDPAddr
		if raddr, err = net.ResolveUDPAddr("udp", fmt.Sprintf("127.0.0.1:%d", conn.port)); err != nil {
			panic(err)
		}

		// Dial udp
		if conn.conn, err = net.DialUDP("udp", laddr, raddr); err != nil {
			panic(err)
		}
		defer func(conn net.PacketConn) {
			if closeErr := conn.Close(); closeErr != nil {
				panic(closeErr)
			}
		}(conn.conn)
	}
	// Set a handler for when a new remote track starts, this handler will forward data to
	// our UDP listeners.
	// In your application this is where you would handle/process audio/video
	peerConnection.OnTrack(func(track *webrtc.TrackRemote, receiver *webrtc.RTPReceiver) {
		// Retrieve udp connection
		// conn, ok := udpConns["video"]
		conn, ok := udpConns[track.Kind().String()]
		if !ok {
			return
		}

		buf := make([]byte, 1500)
		rtpPacket := &rtp.Packet{}
		for {
			// Read
			n, _, readErr := track.Read(buf)
			if readErr != nil {
				panic(readErr)
			}

			// Unmarshal the packet and update the PayloadType
			if err = rtpPacket.Unmarshal(buf[:n]); err != nil {
				panic(err)
			}
			rtpPacket.PayloadType = conn.payloadType

			// Marshal into original buffer with updated PayloadType
			if n, err = rtpPacket.MarshalTo(buf); err != nil {
				panic(err)
			}

			// Write
			if _, writeErr := conn.conn.Write(buf[:n]); writeErr != nil {
				// For this particular example, third party applications usually timeout after a short
				// amount of time during which the user doesn't have enough time to provide the answer
				// to the browser.
				// That's why, for this particular example, the user first needs to provide the answer
				// to the browser then open the third party application. Therefore we must not kill
				// the forward on "connection refused" errors
				var opError *net.OpError
				if errors.As(writeErr, &opError) && opError.Err.Error() == "write: connection refused" {
					continue
				}
				panic(writeErr)
			}
		}
	})

	// Block until ICE Gathering is complete, disabling trickle ICE
	// we do this because we only can exchange one signaling message
	// in a production application you should exchange ICE Candidates via OnICECandidate
	fmt.Fprintln(os.Stderr, "waiting for ice stuff")
	<-gatherComplete

	fmt.Fprintln(os.Stderr, "ice stuff is ready")
	// Output the offer in base64 so we can paste it in browser
	// fmt.Fprintln(os.Stderr, encode(peerConnection.LocalDescription()))

	hostSignal, err := http.Post(fmt.Sprintf("%s/api/host", signalServer), "application/json; charset=UTF-8", bytes.NewBufferString(fmt.Sprintf("{\"id\": \"%s\", \"description\": \"%s\"}", hostId, encode(peerConnection.LocalDescription()))))

	if err != nil {
		panic(fmt.Sprintf("problem with setting up hostId with signalling server: %s", err))
	}
	defer hostSignal.Body.Close()

	if hostSignal.StatusCode == http.StatusOK {
		// var hostSignalBody map[string]interface{}

		// json.NewDecoder(hostSignal.Body).Decode(hostSignalBody)
	} else {
		panic(fmt.Sprintf("problem with setting up hostId with signalling server: %s", "response status"))
	}

	fmt.Fprintln(os.Stderr, "waiting for the peer to join")
	for {
		time.Sleep(1 * time.Second)

		params := url.Values{}
		params.Add("hostId", hostId)

		guestSignal, err := http.Get(fmt.Sprintf("%s/api/guest?%s", signalServer, params.Encode()))
		if err != nil {
			panic(fmt.Sprintf("problem with getting guest information with signalling server: %s", err))
		}
		defer guestSignal.Body.Close()

		if guestSignal.StatusCode == http.StatusOK {
			var guestDescriptionObject map[string]string
			json.NewDecoder(guestSignal.Body).Decode(&guestDescriptionObject)

			guestDescription := guestDescriptionObject["guestDescription"]
			if guestDescription != "" {
				guestOffer := webrtc.SessionDescription{}
				decode(guestDescription, &guestOffer)
				peerConnection.SetRemoteDescription(guestOffer)
				break
			}
		} else {
			panic(fmt.Sprintf("problem with getting guest information with signalling server: %s", "response status"))
		}
	}
	fmt.Fprintf(os.Stderr, "waiting for the peer connection")

	time.Sleep(3 * time.Second)
	// Open a UDP Listener for RTP Packets on port 5004
	listener, err := net.ListenUDP("udp", &net.UDPAddr{IP: net.ParseIP("127.0.0.1"), Port: 5004})
	if err != nil {
		panic(err)
	}

	// Increase the UDP receive buffer size
	// Default UDP buffer sizes vary on different operating systems
	bufferSize := 300000 // 300KB
	err = listener.SetReadBuffer(bufferSize)
	if err != nil {
		panic(err)
	}

	defer func() {
		if err = listener.Close(); err != nil {
			panic(err)
		}
	}()
	// Read RTP packets forever and send them to the WebRTC Client
	inboundRTPPacket := make([]byte, 1600) // UDP MTU
	for {
		readBytes, _, err := listener.ReadFrom(inboundRTPPacket)
		if err != nil {
			panic(fmt.Sprintf("error during read: %s", err))
		}

		// fmt.Println(readBytes)
		_, err = videoTrack.Write(inboundRTPPacket[:readBytes])
		if err != nil {
			if errors.Is(err, io.ErrClosedPipe) {
				// The peerConnection has been closed.
				return
			}

			panic(err)
		}
		// fmt.Println(writtenBytes)
	}
}

// JSON encode + base64 a SessionDescription.
func encode(obj *webrtc.SessionDescription) string {
	b, err := json.Marshal(obj)
	if err != nil {
		panic(err)
	}

	return base64.StdEncoding.EncodeToString(b)
}

// Decode a base64 and unmarshal JSON into a SessionDescription.
func decode(in string, obj *webrtc.SessionDescription) {
	b, err := base64.StdEncoding.DecodeString(in)
	if err != nil {
		panic(err)
	}

	if err = json.Unmarshal(b, obj); err != nil {
		panic(err)
	}
}
